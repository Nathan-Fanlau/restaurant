== SETUP ==
git init
Initialize git in folder

npm init
Initialize npm package.json

npm install --save-dev webpack webpack-cli
Install webpack

npm install --save-dev html-webpack-plugin style-loader css-loader html-loader
Install needed plugin and modules for HTML and CSS 

npm install --save-dev webpack-dev-server
Allows live reloading and serves project locally without needing a full build.

webpack.config.js
Make webpack configuration file

.gitignore
Ignore "node_modules" and "dist"


== CODE DEVELOPMENT ==
Make src folder, content:
- index.js
- styles.css
- index.html

Make sure .html and .js file path at webpack.config.js is correct

npx webpack serve
Hosts project on http://localhost:8080/
Watch for changes in source files (src) and updates the webpage automatically
Doesn't generate output files in the dist folder; 
instead, serves everything from memory.
When to Use: For local development.

Make design in HTML first, then 
Make element generated through JS with DOM

npx webpack
Runs Webpack to bundle your source code into output files typically dist folder
for production or distribution.

== DEPLOY GITHUB PAGES ==
Make a new branch to deploy from by running git branch gh-pages. 
You only need to do this the first time you deploy. 
The rest of the steps should be done every time you deploy or redeploy your project.

Make sure you have all your work committed. 
You can use git status to see if there’s anything that needs committing.

Run git checkout gh-pages && git merge main --no-edit to change branch and sync your 
changes from main so that you’re ready to deploy.

Now let’s bundle our application into dist with your build command. 
For now, that’s npx webpack.

Now there are a few more commands. Run each of these in order:
git add dist -f && git commit -m "Deployment commit"
git subtree push --prefix dist origin gh-pages
git checkout main

Recall that the source branch for GitHub Pages is set in your repository’s settings. 
Get this changed to the gh-pages branch.